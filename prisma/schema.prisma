datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Cart          Cart?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id String @id @default(cuid())

  name        String
  description String
  price       Float
  images      ProductImage[]
  categories  ProductCategory[]
  tags        ProductTag[]
  variants    ProductVariant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

model ProductImage {
  id String @id @default(cuid())

  url       String
  thumbnail String?
  product   Product? @relation(fields: [productId], references: [id])
  productId String?

  @@map("productImages")
}

model ProductCategory {
  id String @id @default(cuid())

  name      String
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?

  @@map("categories")
}

model ProductTag {
  id String @id @default(cuid())

  name      String
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?

  @@map("tags")
}

model ProductVariant {
  id String @id @default(cuid())

  name      String
  sizes     String[]
  colors    String[]
  inventory Json[]

  product   Product? @relation(fields: [productId], references: [id])
  productId String?

  @@map("variants")
}

model Cart {
  id String @id @default(cuid())

  products Json

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  @@map("cart")
}
